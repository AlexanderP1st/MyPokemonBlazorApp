@page "/Trainers"
@rendermode InteractiveServer
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager


<div class="row g-0">
        <div class="col-md-12">
            <button class="btn btn-primary float-end" @onclick="ShowAddTrainer">
                Add Trainer
            </button>
        </div>
 </div>

@if (showForm)
{
    <div class="card">
        <div class="card-body bg-light">
            <h4 class="card-title">
               
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                  <div class="col-md-3">
                      <div class="col-md-3">
                        <label for="name" class="form-label">Name</label>
                        <class="form-control" placeholder="Name" @bind-Value="model.Name" />
                      </div>
                  </div>
               </div>
            </EditForm>
        </div>
    </div>
}


  
<table class="table">
   <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Companion</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>

        </tr>
   </thead
     <tbody>
            @foreach (var trainer in trainers)
            {
            <tr>

                <td>@trainer.Name</td>
                <td>@trainer.Companion.Name</td>
                <td>
                    <button class="btn btn-success" @onclick="() => Edit(trainer)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => Delete(trainer)">Delete</button>
                </td>
            </tr>
            }
     </tbody>
 
            
  
 </table>

@code {
    private Trainers model;
    private bool showForm;
    private EditContext editContext;
    private List<Trainer> trainers;
   
    protected async override Task OnInitializedAsync()
    {
        trainers= await DbContext.Trainers.Include(t=>t.Companion).ToListAsync();
    }

    private void Edit(Trainer trainer)
    {
        
        editContext = new EditContext(model);
        showForm = true;
    }

    private async Task Delete(Trainer trainer)
    {
        DbContext.Trainers.Remove(trainer);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }
    private void Submit()
    {

    }
  

    
    private void ShowAddTrainer()
    {
        
    }

    protected async Task Refresh()
    {
       
    }

}
